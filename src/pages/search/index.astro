---
import Layout from '../../layouts/Layout.astro';
import CardBlog from '../../components/CardBlog.astro';
import { getCollection } from 'astro:content';
const posts = await getCollection("blogs");
posts.sort((a, b) => (a.data.pubDate > b.data.pubDate) ? -1 : 1);
const posts_show = posts.slice(0, 8);
---

<Layout title='Blog'>
    <h1>Blog Page</h1>
    <form class="text-black border-2 rounded-lg border-black p-4">
      <div class="flex flex-col">
        <label for="search">Search the Blogs</label>
        <input class="border-2 border-black rounded-md p-1 font-mono" type="search" required min="2" max="30" name="search" id="search" placeholder="Enter the Search Term..">
      </div>
    </form>
    <ul id="post-result">
    </ul>
</Layout>

<script>
  import DOMPurify from "dompurify";
  import Fuse from 'fuse.js'
  let fuse_instance;
  let data;
  const fuse_options = {
    includeScore: true,
    shouldSort: true,
    threshold: 0.4,
    keys: [
      {
        name: "title",
        weight: 0.7,
      },
      {
        name: "author",
        weight: 0.3,
      }
    ]
  } 
  const form = document.querySelector("form");
  const posts = document.querySelectorAll(".blogcard") as NodeListOf<HTMLElement>;
  const post_result = document.querySelector("#post-result") as HTMLUListElement;
  function generateList(results){
    return results.map( (post) => {
      const {title , author , pubDate , slug , description , tags } = post.item;
      const inputDate = new Date(pubDate);
      const day = inputDate.getUTCDate();
      const month = inputDate.toLocaleString('default', { month: 'long' });
      const year = inputDate.getUTCFullYear();
      const formattedDate = `${day} ${month} ${year}`;
      return `
      <div class="blogcard py-4 my-0 flex bg-transparent justify-start p-1 drop-shadow-sm min-h-[200px] rounded-md overflow-hidden border-r-[1px] border-b-[1px] dark:shadow-xl dark:border-0">
        <span class="mx-3 flex flex-col justify-between">
            <span>
                <p>${formattedDate}</p>
                <h3 class="text-3xl"}><a href=${slug} >${title}</a></h3>
                <h4 class="line-clamp-4">${description}</h4>
            </span>
            <ul class="flex gap-1">
            ${tags.map((tag) => {
                return `<li class="text-purple-500 px-1 hover:text-purple-700"><a href="tag/${tag}" >${tag}</a></li>`
            }).join("")}
        </ul>
        </span>
      </div>
      `;
    } ).join("");
  }

  async function fetchSearchResult(search){
    try{
      const res = await fetch(`/api/search.json`);
      if(!res.ok) throw new Error("Something went wrong!");
      data = await res.json();
    } catch(e){
      console.error(e);
    }
    if(data && !fuse_instance){
      fuse_instance = new Fuse(data,fuse_options);
    }
    if(!fuse_instance) return;
    const result = fuse_instance.search(search);
    console.log("Search Result :",result);
    post_result.innerHTML = result.length > 0 ? generateList(result) : "No Result Found!";
  }
  form?.addEventListener("submit",(e) => {
    e.preventDefault();
    const data = new FormData(form);
    const search = DOMPurify.sanitize(data.get("search")?.toString() as string);
    console.log(search);
    const url = new URL("/search",window.location.origin);
    url.searchParams.set("q",search);
    window.location.assign(url.toString());
  });
  document.addEventListener("DOMContentLoaded", () => {
    const search = document.querySelector("#search") as HTMLInputElement;
    const searchParams = new URLSearchParams(window.location.search);
    const q = searchParams.get("q");
    search.value = q || "";
    search.focus();
    console.log(q);
    fetchSearchResult(q);
  })
</script>